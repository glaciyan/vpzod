#* @vtlvariable name="classes" type="java.util.Collection<cc.glaciyan.vpzod.ClassModel>" *#// Template generated by glaciyan/vpzod Visual Paradigm Plugin
#macro(array $typeMod $multiplicity)
#if($typeMod.equals("[]") || $multiplicity.toString().equals("Many") || $multiplicity.toString().equals("OneToMany"))
.array()#end
#end
#macro(nullish $multiplicity)
#if($multiplicity.toString().equals("NoneToOne"))
.nullish()#end
#end
#macro(modifier $typeMod $multiplicity)
#array($typeMod $multiplicity)#nullish($multiplicity)
#end
#macro(schemaName $name)${name}Schema#end

import { z } from "zod";

#foreach( $cls in $classes )
export const #schemaName($cls.name) = #if($cls.extending)
#schemaName($cls.extending.name).extend#else
z.object#end({
#foreach($attribute in $cls.attributes)
  $attribute.name:#if($attribute.complexType) #schemaName($attribute.type)#else z.${attribute.type}#end#modifier($attribute.typeModifier $attribute.multiplicity),
#end});
export type $cls.name = z.infer<typeof #schemaName($cls.name)>;

#end
